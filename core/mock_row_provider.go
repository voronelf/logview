package core

import context "context"
import io "io"
import mock "github.com/stretchr/testify/mock"

// MockRowProvider is an autogenerated mock type for the RowProvider type
type MockRowProvider struct {
	mock.Mock
}

// ReadFileTail provides a mock function with given fields: ctx, filePath, countBytes
func (_m *MockRowProvider) ReadFileTail(ctx context.Context, filePath string, countBytes int64) (<-chan Row, error) {
	ret := _m.Called(ctx, filePath, countBytes)

	var r0 <-chan Row
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) <-chan Row); ok {
		r0 = rf(ctx, filePath, countBytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Row)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, filePath, countBytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchFileChanges provides a mock function with given fields: ctx, filePath
func (_m *MockRowProvider) WatchFileChanges(ctx context.Context, filePath string) (<-chan Row, error) {
	ret := _m.Called(ctx, filePath)

	var r0 <-chan Row
	if rf, ok := ret.Get(0).(func(context.Context, string) <-chan Row); ok {
		r0 = rf(ctx, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Row)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchOpenedStream provides a mock function with given fields: ctx, stream
func (_m *MockRowProvider) WatchOpenedStream(ctx context.Context, stream io.Reader) (<-chan Row, error) {
	ret := _m.Called(ctx, stream)

	var r0 <-chan Row
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) <-chan Row); ok {
		r0 = rf(ctx, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan Row)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, io.Reader) error); ok {
		r1 = rf(ctx, stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ RowProvider = (*MockRowProvider)(nil)
